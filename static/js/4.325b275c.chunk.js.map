{"version":3,"sources":["components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorBoundary","state","error","errorInfo","this","setState","ErrorMessage","props","children","Component","View","data","name","description","thumbnail","homepage","wiki","className","src","alt","includes","href","RandomChar","useState","char","setChar","useMarvelService","getOneCharacter","clearError","process","setProcess","useEffect","updateChar","id","Math","floor","random","then","res","onCharLoaded","setContent","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onAllCharLoaded","newCharList","ended","length","itemsRefs","useRef","focusOnItem","i","current","forEach","item","classList","remove","add","focus","buttonSpinner","elements","useMemo","Error","console","log","elem","map","CSSTransition","timeout","classNames","tabIndex","ref","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","style","comics","CharInfo","charId","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/4.325b275c.chunk.js","sourcesContent":["import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","// import {Component} from \"react\";\n//\n// import './randomChar.scss';\n// import mjolnir from '../../resources/img/mjolnir.png';\n// import MarvelService from \"../../services/MarvelService\";\n// import Spinner from \"../spinner/spinner\";\n// import ErrorMessage from \"../errorMessage/ErrorMessage\";\n//\n// class RandomChar extends Component {\n//     state = {\n//         char: {},\n//         loading: true,\n//         error: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.updateChar();\n//         // this.timerId = setInterval(this.updateChar, 3000);\n//     }\n//     componentWillUnmount() {\n//         // clearInterval(this.timerId)\n//     }\n//\n//     onCharLoaded = (char) => {\n//         this.setState({char: char, loading: false});\n//     }\n//\n//     onError = () => {\n//         this.setState({error: true, loading: false});\n//     }\n//\n//     onCharLoading = () => {\n//         this.setState({\n//             loading: true\n//         })\n//     }\n//\n//     updateChar = () => {\n//         const id = Math.floor(Math.random() * (1011400 - 1011300) + 1011000);\n//         this.onCharLoading();\n//         this.marvelService.getOneCharacter(id)\n//             .then(res => {\n//                 this.onCharLoaded(res);\n//             })\n//             .catch(err => {\n//                 this.onError();\n//             })\n//\n//         // .then(this.onCharLoaded) - Тоже самое\n//         // .catch(this.onError)\n//\n//     }\n//\n//     render() {\n//         const {char, loading, error} = this.state;\n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const content = !(loading || error) ? <View char={char}/> : null;\n//\n//\n//         return (\n//             <div className=\"randomchar\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 {/*Если у переменной null, ничего не отрендерится*/}\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button className=\"button button__main\" onClick={this.updateChar}>\n//                         <div className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki} = char\n//\n//     return (\n//         <div className=\"randomchar__block\">\n//             <img src={thumbnail} alt={name} className={`randomchar__img ${thumbnail.includes('image_not_available') ? ' randomchar__img_contain' : ''}`}/>\n//             <div className=\"randomchar__info\">\n//                 <p className=\"randomchar__name\">{name}</p>\n//                 <p className=\"randomchar__descr\">\n//                     {description}\n//                 </p>\n//                 <div className=\"randomchar__btns\">\n//                     <a href={homepage} className=\"button button__main\">\n//                         <div className=\"inner\">homepage</div>\n//                     </a>\n//                     <a href={wiki} className=\"button button__secondary\">\n//                         <div className=\"inner\">Wiki</div>\n//                     </a>\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n//\n//\n// export default RandomChar;\n\nimport {useState, useEffect} from \"react\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = (props) => {\n    const [char, setChar] = useState({});\n\n    const {getOneCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011300) + 1011000);\n        getOneCharacter(id)\n            .then(res => {\n                onCharLoaded(res);\n            })\n            .then(() => {\n                setProcess('confirmed')\n            })\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            {/*Если у переменной null, ничего не отрендерится*/}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Случаный персонаж!<br/>\n                    Хотите узнать его получше?\n                </p>\n                <p className=\"randomchar__title\">\n                    Или выберите другого персонажа\n                </p>\n                <button className=\"button button__main\"  onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt={name}\n                 className={`randomchar__img ${thumbnail && thumbnail.includes('image_not_available') ? ' randomchar__img_contain' : ''}`}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default RandomChar;","// import {Component} from \"react\";\n// import PropTypes from 'prop-types';\n//\n//\n// import './charList.scss';\n// import MarvelService from \"../../services/MarvelService\";\n// import Spinner from \"../spinner/spinner\";\n// import ErrorMessage from \"../errorMessage/ErrorMessage\";\n//\n// class CharList extends Component {\n//     state = {\n//         charList: [],\n//         loading: true,\n//         newItemLoading: false,\n//         error: false,\n//         offset: 210,\n//         charEnded: false,\n//     }\n//\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.onRequest();\n//         // window.addEventListener('scroll', this.endOfPage)\n//     }\n//\n//     // componentWillUnmount() {\n//     //     window.removeEventListener('scroll', this.endOfPage)\n//     // }\n//     //\n//     // endOfPage = () => {\n//     //     if (document.body.scrollHeight <= window.innerHeight + document.documentElement.scrollTop) {\n//     //         if(!this.state.newItemLoading){\n//     //             this.onCharListLoading();\n//     //             this.onRequest(this.state.offset);\n//     //         }\n//     //     }\n//     // }\n//\n//     onRequest = (offset) => {\n//         this.onCharListLoading();\n//         this.marvelService.getAllCharacters(offset)\n//             .then(res => {\n//                 this.onAllCharLoaded(res);\n//             })\n//             .catch(this.onError)\n//     }\n//\n//     onCharListLoading = () => {\n//         this.setState({\n//             newItemLoading: true,\n//         })\n//     }\n//\n//     onAllCharLoaded = (newCharList) => {\n//         let ended = false;\n//         if (newCharList.length < 9) {\n//             ended = true;\n//         }\n//\n//         this.setState(({offset, charList, charEnded}) => ({\n//             charList: [...charList, ...newCharList],\n//             loading: false,\n//             newItemLoading: false,\n//             offset: offset + 9,\n//             charEnded: ended,\n//         }));\n//     }\n//\n//     onError = () => {\n//         this.setState({\n//             error: true,\n//             loading: false\n//         });\n//     }\n//\n//     itemsRefs = [];\n//\n//     setRef = (ref) => {\n//         this.itemsRefs.push(ref);\n//         console.log(this.itemsRefs)\n//     }\n//\n//     focusOnItem = (i) => {\n//         this.itemsRefs.forEach(item => item.classList.remove('char__item_selected'));\n//         this.itemsRefs[i].classList.add('char__item_selected');\n//         this.itemsRefs[i].focus();\n//     }\n//\n//     renderItems = (charList) => {\n//         const elem = charList.map((item, i) => {\n//             return (\n//                 <li tabIndex={0} className=\"char__item\" key={item.id}\n//                     // onClick={() => {\n//                     //     this.props.onCharSelected(item.id);\n//                     // }}\n//                     ref={this.setRef}\n//                     onClick={() => {\n//                         this.props.onCharSelected(item.id);\n//                         this.focusOnItem(i);\n//                     }}\n//                     onKeyPress={(e) => {\n//                         if (e.key === ' ' || e.key === \"Enter\") {\n//                             this.props.onCharSelected(item.id);\n//                             this.focusOnItem(i);\n//                         }\n//                     }}>\n//                 >\n//                     <img src={item.thumbnail}\n//                          className={`${item.thumbnail.includes('image_not_available') ? ' randomchar__img_contain' : ''}`}\n//                          alt={item.name}/>\n//                     <div className=\"char__name\">{item.name}</div>\n//                 </li>\n//             )\n//         });\n//\n//         return (\n//             <ul className=\"char__grid\">\n//                 {elem}\n//             </ul>\n//         )\n//     }\n//\n//\n//     render() {\n//         const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n//\n//         const elements = this.renderItems(charList);\n//\n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const htmlChars = !(loading || error) ? elements : null;\n//\n//         const buttonSpinner = (newItemLoading && !loading) ? <Spinner/> : null;\n//\n//\n//         return (\n//             <div className=\"char__list\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {htmlChars}\n//                 <button\n//                     className=\"button button__main button__long\"\n//                     disabled={newItemLoading}\n//                     style={{'display': charEnded ? 'none' : 'block'}}\n//                     onClick={() => this.onRequest(offset)}\n//                 >\n//                     <div className=\"inner\">load more</div>\n//                 </button>\n//                 {buttonSpinner}\n//             </div>\n//         )\n//     }\n// }\n//\n// CharList.propTypes = {\n//     onCharSelected: PropTypes.func.isRequired,\n// }\n//\n//\n// export default CharList;\n\nimport {useState, useEffect, useRef, useMemo} from \"react\";\nimport PropTypes from 'prop-types';\n\n\nimport './charList.scss';\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onAllCharLoaded)\n            .then(() => {\n                setProcess('confirmed')\n            })\n    }\n\n    const onAllCharLoaded = (newCharList) => {\n\n        // const {logger, secondLog} = await import('./someFunc');\n        // logger();\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (i) => {\n        itemsRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRefs.current[i].classList.add('char__item_selected');\n        itemsRefs.current[i].focus();\n    }\n\n    function renderItems(charList) {\n        console.log('render')\n        const elem = charList.map((item, i) => {\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li tabIndex={0} className=\"char__item\"\n                        // onClick={() => {\n                        //     this.props.onCharSelected(item.id);\n                        // }}\n                        ref={(elem) => itemsRefs.current[i] = elem}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        >\n                        <img src={item.thumbnail}\n                             className={`${item && item.thumbnail.includes('image_not_available') ? ' randomchar__img_contain' : ''}`}\n                             alt={item.name}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {elem}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const buttonSpinner = (newItemLoading) ? <Spinner/> : null;\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n            {buttonSpinner}\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\n\nexport default CharList;","// import {Component} from \"react\";\n// import PropTypes from 'prop-types';\n//\n// import Spinner from \"../spinner/spinner\";\n// import ErrorMessage from \"../errorMessage/ErrorMessage\";\n// import Skeleton from \"../skeleton/Skeleton\";\n// import './charInfo.scss';\n// import MarvelService from \"../../services/MarvelService\";\n//\n// class CharInfo extends Component {\n//     state = {\n//         char: null,\n//         loading: false,\n//         error: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.updateChar();\n//     }\n//\n//     componentDidUpdate(prevProps, prevState) {\n//         if (this.props.charId !== prevProps.charId) {\n//             this.updateChar();\n//         }\n//     }\n//\n//     // componentDidCatch(error, errorInfo) {\n//     //     console.log(error)\n//     //     console.log(errorInfo)\n//     //     this.setState({\n//     //         error: true,\n//     //     })\n//     // }\n//\n//     updateChar = () => {\n//         const {charId} = this.props;\n//\n//         if (!charId) {\n//             return null;\n//         }\n//         this.onCharLoading();\n//         this.marvelService\n//             .getOneCharacter(charId)\n//             .then(res => {\n//                 this.onCharLoaded(res);\n//             })\n//             .catch(this.onError);\n//\n//     }\n//\n//     onCharLoaded = (char) => {\n//         this.setState({char: char, loading: false});\n//     }\n//\n//     onError = () => {\n//         this.setState({error: true, loading: false});\n//     }\n//\n//     onCharLoading = () => {\n//         this.setState({\n//             loading: true\n//         })\n//     }\n//\n//     render() {\n//         const {char, loading, error} = this.state;\n//\n//         const skeleton = char || loading || error ? null : <Skeleton/>;\n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const content = !(loading || error || !char) ? <View char={char}/> : null;\n//\n//         return (\n//             <div className=\"char__info\">\n//                 {skeleton}\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//             </div>\n//         )\n//     }\n// }\n//\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki, comics} = char;\n//\n//     // const noComics = comics.length < 1 ? <NoComics/> : null;\n//     return (\n//         <>\n//             <div className=\"char__basics\">\n//                 <img className={`${thumbnail.includes('image_not_available') ? ' randomchar__img_contain' : ''}`} src={thumbnail} alt={name}/>\n//                 <div>\n//                     <div className=\"char__info-name\">{name}</div>\n//                     <div className=\"char__btns\">\n//                         <a href={homepage}\n//                            className=\"button button__main\">\n//                             <div className=\"inner\">homepage</div>\n//                         </a>\n//                         <a href={wiki}\n//                            className=\"button button__secondary\">\n//                             <div className=\"inner\">Wiki</div>\n//                         </a>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div className=\"char__descr\">\n//                 {description}\n//             </div>\n//             <div className=\"char__comics\">Comics:</div>\n//             <ul className=\"char__comics-list\">\n//                 {comics.length < 1 ? 'Извините, комиксов у данного персонажа нет' : null}\n//                 {\n//                     comics.map((item, i) => {\n//                         if (i >= 10) return null; //Если будет много комиксов, то этот код может повлиять на производительность\n//                         return (\n//                             <li key={i} className=\"char__comics-item\">\n//                                 {item.name}\n//                             </li>\n//                         )\n//                     })\n//\n//                     // comics.slice(0, 10).map((item ,i) => {\n//                     //    return (\n//                     //        <li key={i} className=\"char__comics-item\">\n//                     //            {item.name}\n//                     //        </li>\n//                     //    )\n//                     // })\n//                 }\n//             </ul>\n//         </>\n//     )\n// }\n//\n// // const NoComics = () => {\n// //     return (\n// //         <p>Извините, комиксов нет!</p>\n// //     )\n// // }\n//\n// CharInfo.propTypes = {\n//   charId: PropTypes.number\n// };\n//\n// export default CharInfo;\n\nimport {useState, useEffect} from \"react\";\n\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getOneCharacter, clearError, process, setProcess} = useMarvelService()\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n\n        const {charId} = props;\n\n        if (!charId) {\n            return null;\n        }\n\n        clearError();\n        getOneCharacter(charId)\n            .then(res => {\n                onCharLoaded(res);\n            })\n            .then(() => {\n                setProcess('confirmed')\n            })\n\n    }\n\n    const onCharLoaded = (char) => {\n        // this.setState({char: char, loading: false});\n        setChar(char);\n    }\n\n    // const skeleton = char || loading || error ? null : <Skeleton/>;\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n    //setContent из utils\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img className={`${thumbnail.includes('image_not_available') ? ' randomchar__img_contain' : ''}`}\n                     src={thumbnail} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage}\n                           className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki}\n                           className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length < 1 ? 'Извините, комиксов у данного персонажа нет' : null}\n                {\n                    comics.map((item, i) => {\n                        if (i >= 10) return null;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n\n                }\n            </ul>\n        </>\n    )\n}\n\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n};\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {Helmet} from \"react-helmet\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nimport {useState} from \"react\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            {/*<CharSearchForm/>*/}\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}