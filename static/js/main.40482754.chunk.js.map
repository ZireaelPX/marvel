{"version":3,"sources":["services/MarvelService.js","hooks/http.hook.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/Spinner-2.gif","components/spinner/spinner.js","components/appHeader/AppHeader.js","components/pages/SingleCharacterPage.js","components/app/App.js","index.js"],"names":["useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apikey","getAllCharacters","offset","res","results","map","item","_transformOneCharacter","getCharacterByName","name","getOneCharacter","id","getAllComics","_transformComics","getComic","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","language","textObjects","price","prices","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","Skeleton","className","setContent","Component","Spinner","spinner","AppHeader","to","exact","activeStyle","View","Helmet","content","SingleCharacterPage","props","setChar","useParams","useEffect","getCharacter","then","catch","err","console","log","Page404","lazy","MainPage","ComicsPage","SingleComicPage","App","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IA4EeA,IA1EU,WACrB,MCDmB,WAEnB,MAA8BC,mBAAS,WAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KA0BA,MAAO,CAACC,QAxBQC,sBAAW,uCAAC,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,CAAC,eAAgB,oBAE5FP,EAAW,WAFa,kBAKGQ,MAAML,EAAK,CAACE,SAAQC,OAAMC,YAL7B,WAKdE,EALc,QAONC,GAPM,uBAQV,IAAIC,MAAJ,0BAA6BR,EAA7B,qBAA6CM,EAASG,SAR5C,yBAUDH,EAASI,OAVR,eAUdC,EAVc,yBAYbA,GAZa,wCAcpBd,EAAW,SAdS,+DAAD,sDAkBxB,IAMce,WAJEb,uBAAY,WAC3BF,EAAW,aACZ,IAE0BD,UAASC,cD3BagB,GAA5Cf,EAAP,EAAOA,QAASc,EAAhB,EAAgBA,WAAYhB,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,WAE/BiB,EAAW,4CACXC,EAAU,mCAIVC,EAAgB,uCAAG,0CAAAf,EAAA,6DAAOgB,EAAP,+BAFL,IAEK,SACHnB,EAAQ,GAAD,OAAIgB,EAAJ,qCAAyCG,EAAzC,mBAA0DF,IAD9D,cACfG,EADe,yBAGdA,EAAIP,KAAKQ,QAAQC,KAAI,SAAAC,GACxB,OAAOC,EAAuBD,OAJb,2CAAH,qDAQhBE,EAAkB,uCAAG,WAAOC,GAAP,eAAAvB,EAAA,sEACLH,EAAQ,GAAD,OAAIgB,EAAJ,2BAA+BU,EAA/B,mBAA8CT,IADhD,cACjBG,EADiB,yBAEhBA,EAAIP,KAAKQ,QAAQC,IAAIE,IAFL,2CAAH,sDAKlBG,EAAe,uCAAG,WAAOC,GAAP,eAAAzB,EAAA,sEACFH,EAAQ,GAAD,OAAIgB,EAAJ,sBAA0BY,EAA1B,mBAAuCX,IAD5C,cACdG,EADc,yBAEbI,EAAuBJ,EAAIP,KAAKQ,QAAQ,KAF3B,2CAAH,sDAKfQ,EAAY,uCAAG,0CAAA1B,EAAA,6DAAOgB,EAAP,+BAAgB,EAAhB,SACCnB,EAAQ,GAAD,OAAIgB,EAAJ,iCAAqCG,EAArC,mBAAsDF,IAD9D,cACXG,EADW,yBAEVA,EAAIP,KAAKQ,QAAQC,KAAI,SAAAC,GACxB,OAAOO,EAAiBP,OAHX,2CAAH,qDAOZQ,EAAQ,uCAAG,WAAOH,GAAP,eAAAzB,EAAA,sEACKH,EAAQ,GAAD,OAAIgB,EAAJ,kBAAsBY,EAAtB,mBAAmCX,IAD/C,cACPG,EADO,yBAENU,EAAiBV,EAAIP,KAAKQ,QAAQ,KAF5B,2CAAH,sDAMRG,EAAyB,SAACQ,GAC5B,MAAO,CACHJ,GAAII,EAAKJ,GACTF,KAAMM,EAAKN,KACXO,YAAaD,EAAKC,YAAcD,EAAKC,YAAc,6CACnDC,UAAWF,EAAKE,UAAUC,KAAO,IAAMH,EAAKE,UAAUE,UACtDC,SAAUL,EAAKM,KAAK,GAAGpC,IACvBqC,KAAMP,EAAKM,KAAK,GAAGpC,IACnBsC,OAAQR,EAAKQ,OAAOC,QAItBX,EAAmB,SAACU,GACtB,MAAO,CACHZ,GAAIY,EAAOZ,GACXc,MAAOF,EAAOE,MACdT,YAAaO,EAAOP,YAAcO,EAAOP,YAAc,0CACvDC,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DO,SAAUH,EAAOI,YAAYD,UAAY,QACzCE,MAAOL,EAAOM,OAAOD,MAAd,UAAyBL,EAAOM,OAAOD,MAAvC,KAAkD,kBAIjE,MAAO,CACH3B,mBACAS,kBACAI,WACAF,eACAJ,qBACA3B,UACAgB,aACAf,gB,gCExEO,UAA0B,kC,OCQ1BgD,IANM,WACjB,OACI,qBAAKC,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAWC,IAAKC,EAAKC,IAAK,8C,iDCejHC,EAjBE,WACb,OACI,qCACI,mBAAGC,UAAU,eAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,iC,gBCMhBC,IAfI,SAAC7D,EAAS8D,EAAW/C,GACpC,OAAQf,GACJ,IAAK,UACD,OAAO,cAAC,EAAD,IACX,IAAK,UACD,OAAO,cAAC,IAAD,IACX,IAAK,YACD,OAAO,cAAC8D,EAAD,CAAW/C,KAAMA,IAC5B,IAAK,QACD,OAAO,cAACkC,EAAA,EAAD,IACX,QACI,MAAM,IAAIrC,MAAM,+B,gCCfb,UAA0B,sC,eCO1BmD,IALC,WACZ,OACI,qBAAKH,UAAW,UAAWJ,IAAKQ,EAASN,IAAK,qB,8LCkBvCO,EAnBG,WACd,OACI,yBAAQL,UAAU,cAAlB,UACI,oBAAIA,UAAU,aAAd,SACI,eAAC,IAAD,CAAMM,GAAI,IAAV,UACI,0CADJ,kIAIJ,qBAAKN,UAAU,YAAf,SACI,+BACI,6BAAI,cAAC,IAAD,CAASO,OAAK,EAACC,YAAa,CAAC,MAAS,WAAYF,GAAI,IAAtD,sEADR,IAGI,6BAAI,cAAC,IAAD,CAASE,YAAa,CAAC,MAAS,WAAYF,GAAI,UAAhD,mE,gCCyBlBG,EAAO,SAAC,GAAY,IAAXtD,EAAU,EAAVA,KACX,OACI,gCACI,eAACuD,EAAA,EAAD,WACI,sBACI1C,KAAK,cACL2C,QAAO,UAAKxD,EAAKa,QAErB,8CAAiBb,EAAKa,WAN9B,mBASI,uCAAUb,EAAKa,QACf,qBAAK4B,IAAKzC,EAAKqB,UAAWsB,IAAI,SAK3Bc,EAjDa,SAACC,GACzB,MAAwB1E,mBAAS,MAAjC,mBAAOmC,EAAP,KAAawC,EAAb,KACO5C,EAAM6C,cAAN7C,GAGP,EAA+ChC,cAAxC+B,EAAP,EAAOA,gBAAiB7B,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,WAEjC2E,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAe,WACjBhD,EAAgBC,GACXgD,MAAK,SAAAxD,GACFoD,EAAQpD,MAEXwD,MAAK,WACF7E,EAAW,gBAEd8E,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAIxB,OACI,mCAEKnB,YAAW7D,EAASqE,EAAMnC,MC3BjCiD,EAAUC,gBAAK,kBAAM,iCACrBC,EAAWD,gBAAK,kBAAM,uDACtBE,EAAaF,gBAAK,kBAAM,iCACxBG,EAAkBH,gBAAK,kBAAM,iCAkCpBI,EAjCH,WAER,OACI,cAAC,IAAD,UACI,sBAAK5B,UAAU,MAAf,UACI,cAAC,EAAD,IACA,+BACI,cAAC,WAAD,CAAU6B,SAAU,8CAApB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOtB,OAAK,EAAC9B,KAAK,IAAlB,SACI,cAACgD,EAAD,MAEJ,cAAC,IAAD,CAAOlB,OAAK,EAAC9B,KAAK,UAAlB,SACI,cAACiD,EAAD,MAEJ,cAAC,IAAD,CAAOnB,OAAK,EAAC9B,KAAK,mBAAlB,SACI,cAACkD,EAAD,MAEJ,cAAC,IAAD,CAAOpB,OAAK,EAAC9B,KAAK,kBAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC8C,EAAD,mB,MC5BhCO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.40482754.chunk.js","sourcesContent":["import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = '3106c8797b65de80e88f4006de48c257';\r\n    // 3106c8797b65de80e88f4006de48c257             b9e899f94f57fe2ab7d36673fc9feb7b\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apikey}`)\r\n        // return res.data.results.map(this._transformOneCharacter);\r\n        return res.data.results.map(item => {\r\n            return _transformOneCharacter(item)\r\n        })\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&apikey=${_apikey}`);\r\n        return res.data.results.map(_transformOneCharacter);\r\n    }\r\n\r\n    const getOneCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apikey}`)\r\n        return _transformOneCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apikey}`);\r\n        return res.data.results.map(item => {\r\n            return _transformComics(item)\r\n        })\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apikey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const _transformOneCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description ? comics.description : 'There is no description for this comics',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {\r\n        getAllCharacters,\r\n        getOneCharacter,\r\n        getComic,\r\n        getAllComics,\r\n        getCharacterByName,\r\n        process,\r\n        clearError,\r\n        setProcess\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (err) {\r\n            setProcess('error');\r\n            throw err;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, [])\r\n\r\n    return {request, clearError, process, setProcess};\r\n}","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}} src={img} alt={\"Ошибка...\"}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Spinner-2.0c299348.gif\";","import spinner from '../../resources/Spinner-2.gif';\r\nimport './spinner.scss';\r\nconst Spinner = () => {\r\n    return(\r\n        <img className={'spinner'} src={spinner} alt={'Spinner Loaded'}/>\r\n    )\r\n}\r\nexport default Spinner\r\n","import './appHeader.scss';\nimport {Link, NavLink} from \"react-router-dom\";\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <Link to={\"/\"}>\n                    <span>Marvel</span> информационный портал\n                </Link>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><NavLink exact activeStyle={{'color': '#9f0013'}} to={\"/\"}>Персонажи</NavLink></li>\n                    /\n                    <li><NavLink activeStyle={{'color': '#9f0013'}} to={\"/comics\"}>Комиксы</NavLink></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;\n\n// import './appHeader.scss';\n// import {Link, NavLink} from \"react-router-dom\";\n//\n// const AppHeader = () => {\n//     return (\n//         <header className=\"app__header\">\n//             <h1 className=\"app__title\">\n//                 <Link to={\"/\"}>\n//                     <span>Marvel</span> information portal\n//                 </Link>\n//             </h1>\n//             <nav className=\"app__menu\">\n//                 <ul>\n//                     <li><NavLink\n//                         end\n//                         style={({isActive}) =>\n//                             ({'color': isActive ? '#9f0013' : 'inherit'})\n//                         }\n//                         to={\"/\"}\n//                     >Characters</NavLink></li>\n//                     /\n//                     <li><NavLink\n//                         end\n//                         style={({isActive}) =>\n//                             ({'color': isActive ? '#9f0013' : 'inherit'})\n//                         }\n//                         to={\"/comics\"}\n//                     >Comics</NavLink></li>\n//                 </ul>\n//             </nav>\n//         </header>\n//     )\n// }\n//\n// export default AppHeader;","import {useParams} from \"react-router-dom\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\n\r\n\r\nconst SingleCharacterPage = (props) => {\r\n    const [char, setChar] = useState(null);\r\n    const {id} = useParams();\r\n\r\n\r\n    const {getOneCharacter, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(()=> {\r\n        getCharacter();\r\n    },[])\r\n\r\n    const getCharacter = () => {\r\n        getOneCharacter(id)\r\n            .then(res => {\r\n                setChar(res);\r\n            })\r\n            .then(() => {\r\n                setProcess('confirmed')\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    // const loading = char ? <View char={char}/> : null;\r\n    return (\r\n        <>\r\n            {/*{loading}*/}\r\n            {setContent(process, View, char)}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${data.name}`}\r\n                />\r\n                <title>Marvel - {data.name}</title>\r\n            </Helmet>\r\n            Page characters:\r\n            <p>Name: {data.name}</p>\r\n            <img src={data.thumbnail} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleCharacterPage;","import {lazy, Suspense} from \"react\";\nimport {BrowserRouter, Route, Switch, HashRouter} from \"react-router-dom\";\n\nimport AppHeader from \"../appHeader/AppHeader\";\nimport SingleCharacterPage from \"../pages/SingleCharacterPage\";\n\n// import {ComicsPage, SingleComicPage, Page404, MainPage} from '../pages';\n\nconst Page404 = lazy(() => import('../pages/404'))\nconst MainPage = lazy(() => import('../pages/MainPage'))\nconst ComicsPage = lazy(() => import('../pages/ComicsPage'))\nconst SingleComicPage = lazy(() => import('../pages/SingleComicPage'))\nconst App = () => {\n\n    return (\n        <HashRouter>\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <Suspense fallback={<span>Loading...</span>}>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <MainPage/>\n                            </Route>\n                            <Route exact path=\"/comics\">\n                                <ComicsPage/>\n                            </Route>\n                            <Route exact path=\"/comics/:comicId\">\n                                <SingleComicPage/>\n                            </Route>\n                            <Route exact path=\"/characters/:id\">\n                                <SingleCharacterPage/>\n                            </Route>\n                            <Route path=\"*\">\n                                <Page404/>\n                            </Route>\n                        </Switch>\n                    </Suspense>\n                </main>\n            </div>\n        </HashRouter>\n    )\n\n}\n\nexport default App;\n\n// import {BrowserRouter, Route, Routes} from \"react-router-dom\";\n//\n// import AppHeader from \"../appHeader/AppHeader\";\n//\n// import {MainPage, ComicsPage} from '../pages';\n//\n//\n// const App = () => {\n//\n//     return (\n//         <BrowserRouter>\n//             <div className=\"app\">\n//                 <AppHeader/>\n//                 <main>\n//                     <Routes>\n//                         <Route path=\"/\" element={<MainPage/>}/>\n//                         <Route path=\"/comics\" element={<ComicsPage/>}/>\n//                     </Routes>\n//                 </main>\n//             </div>\n//         </BrowserRouter>\n//     )\n// }\n//\n// export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './style/style.scss';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}